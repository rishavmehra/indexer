// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type IndexerStatus string

const (
	IndexerStatusPending   IndexerStatus = "pending"
	IndexerStatusActive    IndexerStatus = "active"
	IndexerStatusPaused    IndexerStatus = "paused"
	IndexerStatusFailed    IndexerStatus = "failed"
	IndexerStatusCompleted IndexerStatus = "completed"
)

func (e *IndexerStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IndexerStatus(s)
	case string:
		*e = IndexerStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for IndexerStatus: %T", src)
	}
	return nil
}

type NullIndexerStatus struct {
	IndexerStatus IndexerStatus `json:"indexerStatus"`
	Valid         bool          `json:"valid"` // Valid is true if IndexerStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIndexerStatus) Scan(value interface{}) error {
	if value == nil {
		ns.IndexerStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IndexerStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIndexerStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IndexerStatus), nil
}

type IndexerType string

const (
	IndexerTypeNftBids     IndexerType = "nft_bids"
	IndexerTypeNftPrices   IndexerType = "nft_prices"
	IndexerTypeTokenBorrow IndexerType = "token_borrow"
	IndexerTypeTokenPrices IndexerType = "token_prices"
)

func (e *IndexerType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IndexerType(s)
	case string:
		*e = IndexerType(s)
	default:
		return fmt.Errorf("unsupported scan type for IndexerType: %T", src)
	}
	return nil
}

type NullIndexerType struct {
	IndexerType IndexerType `json:"indexerType"`
	Valid       bool        `json:"valid"` // Valid is true if IndexerType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIndexerType) Scan(value interface{}) error {
	if value == nil {
		ns.IndexerType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IndexerType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIndexerType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IndexerType), nil
}

type DbCredential struct {
	ID         pgtype.UUID        `json:"id"`
	UserID     pgtype.UUID        `json:"userId"`
	DbHost     string             `json:"dbHost"`
	DbPort     int32              `json:"dbPort"`
	DbName     string             `json:"dbName"`
	DbUser     string             `json:"dbUser"`
	DbPassword string             `json:"dbPassword"`
	DbSslMode  string             `json:"dbSslMode"`
	CreatedAt  pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt  pgtype.Timestamptz `json:"updatedAt"`
}

type Indexer struct {
	ID             pgtype.UUID        `json:"id"`
	UserID         pgtype.UUID        `json:"userId"`
	DbCredentialID pgtype.UUID        `json:"dbCredentialId"`
	IndexerType    IndexerType        `json:"indexerType"`
	Params         json.RawMessage    `json:"params"`
	TargetTable    string             `json:"targetTable"`
	WebhookID      pgtype.Text        `json:"webhookId"`
	Status         IndexerStatus      `json:"status"`
	LastIndexedAt  pgtype.Timestamptz `json:"lastIndexedAt"`
	ErrorMessage   pgtype.Text        `json:"errorMessage"`
	CreatedAt      pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt      pgtype.Timestamptz `json:"updatedAt"`
}

type IndexingLog struct {
	ID        pgtype.UUID        `json:"id"`
	IndexerID pgtype.UUID        `json:"indexerId"`
	EventType string             `json:"eventType"`
	Message   string             `json:"message"`
	Details   json.RawMessage    `json:"details"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
}

type User struct {
	ID           pgtype.UUID        `json:"id"`
	Email        string             `json:"email"`
	PasswordHash string             `json:"passwordHash"`
	CreatedAt    pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt    pgtype.Timestamptz `json:"updatedAt"`
}
